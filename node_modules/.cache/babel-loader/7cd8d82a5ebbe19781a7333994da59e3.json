{"ast":null,"code":"var _jsxFileName = \"/home/ben/projects/sandbox/react-calculator/src/components/App/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"../Button/Button\";\nimport Display from \"../Display/Display\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      console.log(e.target); // Determine which button has been clicked and handle it accordingly\n\n      switch (e.target.id) {\n        case \"clear\":\n          this.handleClearButton();\n          break;\n\n        case \"zero\":\n        case \"one\":\n        case \"two\":\n        case \"three\":\n        case \"four\":\n        case \"five\":\n        case \"six\":\n        case \"seven\":\n        case \"eight\":\n        case \"nine\":\n          this.handleDigitButton(e.target.value);\n          break;\n\n        case \"add\":\n        case \"subtract\":\n        case \"multiply\":\n        case \"divide\":\n          this.handleOperatorButton(e.target.value);\n          break;\n\n        default:\n          console.warn(\"There is no functionality for button:\", e.target.id);\n      }\n    };\n\n    this.handleClearButton = () => {\n      console.log(\"CLEAR input/output values! ðŸ’£\");\n      this.setState({\n        inputValue: null,\n        outputValue: 0\n      });\n    };\n\n    this.handleDigitButton = value => {\n      console.log(value);\n      this.state.inputValue != null ? this.setState({\n        inputValue: parseInt(\" \" + this.state.inputValue + value)\n      }) : this.setState({\n        inputValue: parseInt(value)\n      });\n    };\n\n    this.handleOperatorButton = operator => {\n      // Display the operator pressed\n      console.log(operator); // Display previous number\n      // Apply calculation and store new number as the current input number\n    };\n\n    this.state = {\n      buttons: {\n        equals: \"=\",\n        zero: \"0\",\n        one: \"1\",\n        two: \"2\",\n        three: \"3\",\n        four: \"4\",\n        five: \"5\",\n        six: \"6\",\n        seven: \"7\",\n        eight: \"8\",\n        nine: \"9\",\n        add: \"+\",\n        subtract: \"-\",\n        multiply: \"*\",\n        divide: \"/\",\n        decimal: \".\",\n        clear: \"C\"\n      },\n      inputValue: null,\n      outputValue: 0,\n      currentOperator: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClearButton = this.handleClearButton.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Display, {\n      value: this.state.inputValue === null ? this.state.outputValue : this.state.inputValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \"Test\"), Object.entries(this.state.buttons).map(([key, value]) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        key: key,\n        id: key,\n        value: value,\n        event: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ben/projects/sandbox/react-calculator/src/components/App/App.js"],"names":["React","Component","Button","Display","App","constructor","props","handleClick","e","console","log","target","id","handleClearButton","handleDigitButton","value","handleOperatorButton","warn","setState","inputValue","outputValue","state","parseInt","operator","buttons","equals","zero","one","two","three","four","five","six","seven","eight","nine","add","subtract","multiply","divide","decimal","clear","currentOperator","bind","render","Object","entries","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"../Button/Button\";\nimport Display from \"../Display/Display\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttons: {\n        equals: \"=\",\n        zero: \"0\",\n        one: \"1\",\n        two: \"2\",\n        three: \"3\",\n        four: \"4\",\n        five: \"5\",\n        six: \"6\",\n        seven: \"7\",\n        eight: \"8\",\n        nine: \"9\",\n        add: \"+\",\n        subtract: \"-\",\n        multiply: \"*\",\n        divide: \"/\",\n        decimal: \".\",\n        clear: \"C\",\n      },\n      inputValue: null,\n      outputValue: 0,\n      currentOperator: null,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClearButton = this.handleClearButton.bind(this);\n  }\n\n  handleClick = (e) => {\n    console.log(e.target);\n\n    // Determine which button has been clicked and handle it accordingly\n    switch (e.target.id) {\n      case \"clear\":\n        this.handleClearButton();\n        break;\n      case \"zero\":\n      case \"one\":\n      case \"two\":\n      case \"three\":\n      case \"four\":\n      case \"five\":\n      case \"six\":\n      case \"seven\":\n      case \"eight\":\n      case \"nine\":\n        this.handleDigitButton(e.target.value);\n        break;\n      case \"add\":\n      case \"subtract\":\n      case \"multiply\":\n      case \"divide\":\n        this.handleOperatorButton(e.target.value);\n        break;\n      default:\n        console.warn(\"There is no functionality for button:\", e.target.id);\n    }\n  };\n\n  handleClearButton = () => {\n    console.log(\"CLEAR input/output values! ðŸ’£\");\n    this.setState({\n      inputValue: null,\n      outputValue: 0,\n    });\n  };\n\n  handleDigitButton = (value) => {\n    console.log(value);\n    this.state.inputValue != null\n      ? this.setState({\n          inputValue: parseInt(\" \" + this.state.inputValue + value),\n        })\n      : this.setState({\n          inputValue: parseInt(value),\n        });\n  };\n\n  handleOperatorButton = (operator) => {\n    // Display the operator pressed\n    console.log(operator);\n    // Display previous number\n    // Apply calculation and store new number as the current input number\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Display\n          value={\n            this.state.inputValue === null\n              ? this.state.outputValue\n              : this.state.inputValue\n          }\n        />\n        <button onClick={this.handleClick}>Test</button>\n        {Object.entries(this.state.buttons).map(([key, value]) => {\n          return (\n            <Button key={key} id={key} value={value} event={this.handleClick} />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}